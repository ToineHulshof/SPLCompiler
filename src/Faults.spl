// f(x) { return x:[]; }
// f(x) { return 1:x; }
// f(x) { return x.fst; }
// f(x) { return x == x && x < x; }
// f(x) { return x == (x == 1); }
// f(x) { var y = x.hd; return y; }
// f(x) { return x; return x.hd; }
// f(x) { return x.snd; return x.fst; }
// f(x) { return x.fst.fst; }
// f(x) { return x.fst.fst.fst.fst; }
// fromTo ( from, to ) {
//     if ( from <= to ) {
//         return from : fromTo ( from + 1, to );
//     } else {
//         return [];
//     }
// }
Overloading (SumProduct.spl) -> optional
// f0(x) { return (x, x); }
// f1(x) { return f0(f0(x)); }
// f(x) { return x == x; } g(x) { return f(x); }
// vars in cycles
"polymorphic_value_indirect_shouldfail" -> Mart mailen