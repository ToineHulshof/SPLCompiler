/*
    Three ways to implement the factorial function in SPL.
    First the recursive version.
*/
facR ( n ) {
    if ( n < 2 ) {
        return 1;
    } else {
        return n * facR ( n - 1 );
    }
}

// A main function to check the results
// It takes no arguments, so the type looks like this:
main ( ) {
    var n = 0;
    // var facN = 1;
    // var ok = True;
    while ( n < 20 ) {
        print(facR(n));
        // facN = facR ( n );
        // if ( facN != facI ( n ) || facN != facL ( n )) {
        //     print ( n : facN : facI ( n ) : facL ( n ) : [] );
        //     ok = False;
        // }
        n = n + 1;
    }
    // print ( ok );
}
